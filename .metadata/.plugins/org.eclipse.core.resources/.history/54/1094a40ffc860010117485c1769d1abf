package sample.web;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.nexacro.uiadapter17.spring.core.annotation.ParamDataSet;
import com.nexacro.uiadapter17.spring.core.data.NexacroResult;
import com.nexacro17.xapi.data.DataSet;
import com.nexacro17.xapi.data.DataTypes;

import sample.service.MainService;

@Controller
public class MainController {
	
	@Autowired
	private MainService mainService;
	
	@RequestMapping(value="/selectUser.do")
	public NexacroResult selectUser(@ParamDataSet(name="ds_user", required = false) Map<String, Object> ds_user, HttpServletRequest request) {
		NexacroResult rs = new NexacroResult();
		System.out.println(ds_user);
		
		try {
			Map<String, Object> user = mainService.selectUser(ds_user);
			System.out.println(user);
			if(user == null) {
				rs.setErrorCode(404);
				rs.setErrorMsg("아이디에 맞는 유저를 찾을수없습니다");
				return rs;
			}
			if("O".equals(user.get("PASS"))) {
				HttpSession session = request.getSession();
				session.setAttribute("userInfo", user);
				rs.addDataSet("ds_login", user);
				return rs;
			}
		} catch (Exception e) {
			rs.setErrorCode(-1);
			rs.setErrorMsg("try_catch Error"); 
			System.out.println(e);
		}
		return rs;
	} 
	
	@RequestMapping(value="/idEqualCheck.do")
	public NexacroResult equalCheck(
			@ParamDataSet(name="ds_sign", required = false) 
			Map<String, Object> ds_sign 
			) {
		NexacroResult rs = new NexacroResult();
		String inputName = (String) ds_sign.get("sign_id");
		int count = mainService.idEqualCheck(inputName);
		Map<String, Object> test = new HashMap<>();
		test.put("count",count);
		System.out.println(count);
		rs.addDataSet("id_count", test);
		return rs;
	}
	
	@RequestMapping(value="/insertSign.do")
	public NexacroResult insertSign(
			@ParamDataSet(name="ds_sign", required = false) 
			Map<String, Object> ds_sign 
			) {
		NexacroResult rs = new NexacroResult();
		System.out.println(ds_sign);
		
		int count = mainService.insertSign(ds_sign);
		Map<String, Object> test = new HashMap<>();
		test.put("count",count);
		
		rs.addDataSet("sign_count", test);
		return rs;
	}

	@RequestMapping(value="/selectBoard.do")
	public NexacroResult selectBoard(
	/*
	 * @ParamDataSet(name="ds_search", required = false) Map<String, Object>
	 * ds_search
	 */
			) {
		NexacroResult rs = new NexacroResult();
		Map<String, Object> test = new HashMap();
		List<Map<String, Object>> board = mainService.selectBoard(test);
		List<Map<String, Object>> pub = mainService.selectWriter();
		rs.addDataSet("ds_list", board);
		rs.addDataSet("ds_pub", pub);
		return rs;
	}
	
	@RequestMapping(value="/detailBoard.do")
	public NexacroResult detailBoard(
	  @ParamDataSet(name="board_id", required = false) Map<String, Object>
	  board_id
			) {
		NexacroResult rs = new NexacroResult();
		Map<String, Object> board = mainService.detailBoard(board_id);
		rs.addDataSet("ds_board", board);
		
		return rs;
	}
	
	@RequestMapping(value="/searchBoard.do")
	public NexacroResult selectBoard(
	  @ParamDataSet(name="ds_search", required = false) Map<String, Object>
	  ds_search
			) {
		NexacroResult rs = new NexacroResult();
		
		if (ds_search.get("search_start_date") == null) {
			ds_search.put("search_start_date","1900-01-01 00:00:00");
		}
		if (ds_search.get("search_end_date") == null) {
			ds_search.put("search_end_date","2999-12-31 23:59:59");
		} else {
			try {
				String date_str = (String) ds_search.get("search_end_date");
				SimpleDateFormat transFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				Date date = transFormat.parse(date_str);

				Calendar cal1 = Calendar.getInstance();
				cal1.setTime(date);
				cal1.add(Calendar.DATE, 1);
				System.out.println(new Date(cal1.getTimeInMillis()));
				ds_search.put("search_end_date",new Date(cal1.getTimeInMillis()));
			} catch (Exception e) {
				System.out.println(e);
			}
			
		}
		
		List<Map<String, Object>> board = mainService.searchBoard(ds_search);
		rs.addDataSet("ds_list", board);
		return rs;
	}
	
	@RequestMapping(value="/searchPubBoard.do")
	public NexacroResult searchPubBoard(
	  @ParamDataSet(name="ds_select_pub", required = false) Map<String, Object>
	  ds_select_pub
			) {
		NexacroResult rs = new NexacroResult();
	
		List<Map<String, Object>> board = mainService.searchBoard(ds_select_pub);
		rs.addDataSet("ds_list", board);
		return rs;
	}
	
	@RequestMapping(value="/insertRow.do")
	public NexacroResult insertRow(
		@ParamDataSet(name="ds_list", required = false) 
		List<Map<String, Object>> ds_list
	    , @ParamDataSet(name="ds_delete", required = false)
		List<Map<String, Object>> ds_delete
			) {
		NexacroResult rs = new NexacroResult();
		for(Map<String, Object> row : ds_delete) {
			System.out.println(row.get("BOARD_CODE"));
				if(row.get("BOARD_CODE") != null){
				mainService.deleteBoard(row);
			}
		}
		
		for(Map<String, Object> row : ds_list) {
			Object rowTypeObj = row.get("rowtype");
			System.out.println(row);
	    if(rowTypeObj != null) {
			int rowtype = Integer.parseInt(String.valueOf(rowTypeObj));
			if(rowtype == 2){
				mainService.insertBoard(row);
			}
			if(rowtype == 4){
				mainService.updateBoard(row);
			}

		}
	}
		
		Map<String, Object> test = new HashMap();
		List<Map<String, Object>> board = mainService.selectBoard(test);
		rs.addDataSet("ds_list", board);
		
		return rs;
	}
	
	
// ---- 상품조회 ---- //
	@RequestMapping(value="/selectCategory.do")
	public NexacroResult selectCategory() {
		NexacroResult rs = new NexacroResult();
		List<Map<String, Object>> category = mainService.selectCategory();
		rs.addDataSet("ds_category", category);
		return rs;
	}
	
	@RequestMapping(value="/searchProduct.do")
	public NexacroResult searchProduct(
	  @ParamDataSet(name="select_category", required = false) Map<String, Object>
	  select_category
			) {
		NexacroResult rs = new NexacroResult();
		List<Map<String, Object>> board = mainService.searchProduct(select_category);
		rs.addDataSet("ds_list", board);
		return rs;
	}
	
	@RequestMapping(value="/cudProduct.do")
	public NexacroResult cudProduct(
	  @ParamDataSet(name="ds_list", required = false) Map<String, Object>
	  ds_list
			) {
		NexacroResult rs = new NexacroResult();
		Map<String,Object> result = new HashMap<String,Object>();
		int count = 0;
		String rowType = (String) ds_list.get("rowtype");
		System.out.println(rowType);
		try {
			if(rowType.equals("D")) {
				count = mainService.deleteProduct(ds_list);
				result.put("resType", "D");		
			}
			if(rowType.equals("U")) {
				count = mainService.updateProduct(ds_list);
				result.put("resType", "U");		
			}
			if(rowType.equals("I")) {
				count = mainService.insertProduct(ds_list);
				result.put("resType", "I");		
			}
		} catch (Exception e) {
			System.out.println(e);
		}
		result.put("resCount", count);
		rs.addDataSet("ds_result", result);
		return rs;
	}
	/* DEPT */
	@RequestMapping(value="/selectDept.do")
	public NexacroResult selectDept() {
		NexacroResult rs = new NexacroResult();
		List<Map<String, Object>> dept = mainService.selectDept();
		List<Map<String, Object>> sub = mainService.selectDeptSub();
		Map<String, Object> all = new HashMap<String, Object>();
		all.put("dept_cd", "ALL");
		all.put("dept_nm", "전체");
		dept.add(0, all);
		
		rs.addDataSet("ds_dept", dept);
		rs.addDataSet("ds_sub", sub);
		return rs;
	}
	@RequestMapping(value="/selectUserDept.do")
	public NexacroResult selectUser(@ParamDataSet(name="ds_select", required = false) Map<String, Object>
	  ds_select) {
		NexacroResult rs = new NexacroResult();
		try {
				List<Map<String, Object>> sub = mainService.selectUserDept(ds_select);
				rs.addDataSet("ds_result", sub);
			}catch (Exception e) {
				System.out.println(e);
			Map<String, Object> emp = new HashMap<String, Object>();
			List<Map<String, Object>> sub = mainService.selectUserDept(emp);
			rs.addDataSet("ds_result", sub);
		}
		System.out.println(ds_select);
		
		return rs;
	}
}
